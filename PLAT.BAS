#INCLUDE ONCE "INC/RAYLIB.BI"

DECLARE FUNCTION BOXCOLLISION(SPOT AS VECTOR3, BOX AS VECTOR3, DIMENSIONS AS VECTOR3) AS BOOLEAN
DECLARE FUNCTION BOXSPHERECOLLISION(SPOT AS VECTOR3, RADIUS AS INTEGER, BOX AS VECTOR3, DIMENSIONS AS VECTOR3) AS BOOLEAN

CONST SCREEN_WIDTH = 256 * 4
CONST SCREEN_HEIGHT = 192 * 4
DIM AS SINGLE CAMERA_Y_OFF = 7
CONST CAMERA_Z_OFF = 15
CONST CAMERA_HEIGHT = 3
CONST MAX_SPEED = 20
CONST PLAYER_RADIUS = 0.8
CONST FALLING_SPEED = .75

INITWINDOW(SCREEN_WIDTH, SCREEN_HEIGHT, "FREEBASIC RAYLIB PLATFORMER TEST")

VAR I = 0
VAR J = 0
DIM AS VECTOR3 PLAYER_POS = VECTOR3(0,0,0)
DIM AS DOUBLE OLDTIME = 0
DIM AS DOUBLE ROTATION = 0
DIM AS DOUBLE SIN_CAM = 0
DIM AS DOUBLE COS_CAM = 0
DIM AS DOUBLE TEMPX = 0
DIM AS DOUBLE TEMPZ = 0
VAR DEBOUNCE = 0
VAR ISJUMPING = FALSE
VAR ISFALLING = FALSE
DIM JUMP_FLOOR AS SINGLE = 0
VAR COLLIDETEST = FALSE
VAR SPEED = 0
VAR CORRECTION_OFFSET = 0
VAR SOLVEDCOLLISION = FALSE
VAR STRIG = 0
DIM X_AXIS AS SINGLE
DIM Y_AXIS AS SINGLE


CONST FORWARDS = TRUE
CONST BACKWARDS = FALSE
VAR DIRECTION = FORWARDS

DIM AS CAMERA3D CAMERA
CAMERA.POSITION = VECTOR3(PLAYER_POS.X, PLAYER_POS.Y + CAMERA_Y_OFF, PLAYER_POS.Z + CAMERA_Z_OFF)
CAMERA.TARGET = VECTOR3(PLAYER_POS.X, PLAYER_POS.Y + CAMERA_HEIGHT, PLAYER_POS.Z)
CAMERA.UP = VECTOR3(0, 1, 0)
CAMERA.FOVY = 40
CAMERA.TYPE = CAMERA_PERSPECTIVE

DIM AS IMAGE CHECKERS = GENIMAGECHECKED(1000, 1000, 1, 1, RAYGREEN, DARKGREEN)
DIM AS TEXTURE2D TEXTURE = LOADTEXTUREFROMIMAGE(CHECKERS)

DIM AS MODEL FLOOR = LOADMODELFROMMESH(GENMESHPLANE(2, 2, 5, 5))
FLOOR.MATERIALS[0].MAPS[MAP_DIFFUSE].TEXTURE = TEXTURE

DIM CUBE_POSITIONS(4) AS VECTOR3
CUBE_POSITIONS(0) = VECTOR3(0,0,-20)
CUBE_POSITIONS(1) = VECTOR3(20,0,0)
CUBE_POSITIONS(2) = VECTOR3(0,0,20)
CUBE_POSITIONS(3) = VECTOR3(-20,0,0)

DIM CUBE_DIMENSIONS(4) AS VECTOR3
CUBE_DIMENSIONS(0) = VECTOR3(10,10,10)
CUBE_DIMENSIONS(1) = VECTOR3(10,20,10)
CUBE_DIMENSIONS(2) = VECTOR3(10,30,10)
CUBE_DIMENSIONS(3) = VECTOR3(10,40,10)

DIM CUBE_COLORS(4) AS COLOR
CUBE_COLORS(0) = YELLOW
CUBE_COLORS(1) = DARKBLUE
CUBE_COLORS(2) = RAYRED
CUBE_COLORS(3) = VIOLET

MAIN:
	OLDTIME = GETTIME()

	BEGINDRAWING()
		CLEARBACKGROUND(SKYBLUE)
		BEGINMODE3D(CAMERA)
			DRAWSPHERE(VECTOR3(PLAYER_POS.X, PLAYER_POS.Y + 0.75, PLAYER_POS.Z), PLAYER_RADIUS, RAYBLUE)
	
			FOR I = 0 TO UBOUND(CUBE_POSITIONS)
				DRAWCUBEV(CUBE_POSITIONS(I),CUBE_DIMENSIONS(I),CUBE_COLORS(I))
				DRAWCUBEWIRESV(CUBE_POSITIONS(I),CUBE_DIMENSIONS(I),BLACK)
			NEXT I
			
			DRAWMODEL(FLOOR, VECTOR3(0,0,0), 1000, WHITE)
		ENDMODE3D()
		
		DRAWTEXT(STR(ISFALLING), 0,0,40, RAYRED)
		DRAWTEXT(STR(CAMERA_Y_OFF), 0,40,40, RAYRED)
	ENDDRAWING()
	
	
	GETJOYSTICK(0,STRIG,X_AXIS,Y_AXIS)
	
	
	IF (ISKEYDOWN(KEY_SPACE) OR STRIG > 0) AND PLAYER_POS.Y = JUMP_FLOOR THEN 		
		ISJUMPING = TRUE
	ENDIF 
	
	IF ISJUMPING THEN
		IF PLAYER_POS.Y < JUMP_FLOOR + 15 THEN PLAYER_POS.Y += 1 ELSE ISJUMPING = FALSE: ISFALLING = TRUE
	ELSE 
		IF PLAYER_POS.Y > 0 THEN 
			COLLIDETEST = FALSE
			FOR I = 0 TO UBOUND(CUBE_DIMENSIONS)
				IF BOXCOLLISION(VECTOR3(PLAYER_POS.X, PLAYER_POS.Y - FALLING_SPEED, PLAYER_POS.Z),CUBE_POSITIONS(I),CUBE_DIMENSIONS(I)) THEN
					COLLIDETEST = TRUE
					JUMP_FLOOR = PLAYER_POS.Y
					IF ISFALLING AND ((NOT ISKEYDOWN(KEY_UP)) OR Y_AXIS < .9) THEN SPEED = 5
					ISFALLING = FALSE
				END IF
			NEXT I
			
			
			IF COLLIDETEST = FALSE THEN PLAYER_POS.Y -= FALLING_SPEED
		ELSE 
			IF ISFALLING AND ((NOT ISKEYDOWN(KEY_UP)) OR Y_AXIS > -.9) THEN SPEED = 5
			JUMP_FLOOR = 0:ISFALLING = FALSE
		END IF
	END IF
	
	'IF ISFALLING THEN 
	'	IF CAMERA_Y_OFF < 14 THEN CAMERA_Y_OFF += .1
	'END IF
	
	'IF CAMERA_Y_OFF > 7 AND NOT ISFALLING THEN IF CAMERA_Y_OFF < 8 THEN CAMERA_Y_OFF = 7 ELSE CAMERA_Y_OFF -=1 
	
	
	IF ISKEYDOWN(KEY_LEFT) OR X_AXIS < -.9 THEN ROTATION =  -.075 ELSE IF ISKEYDOWN(KEY_RIGHT) OR X_AXIS > .0THEN ROTATION =  .075 ELSE ROTATION = 0
	
	SIN_CAM = SIN(ROTATION)
	COS_CAM = COS(ROTATION)

	TEMPX = CAMERA.POSITION.X - PLAYER_POS.X
	TEMPZ = CAMERA.POSITION.Z - PLAYER_POS.Z

	CAMERA.POSITION.X = (COS_CAM * TEMPX - SIN_CAM * TEMPZ) + PLAYER_POS.X
	CAMERA.POSITION.Y = PLAYER_POS.Y + CAMERA_Y_OFF
	CAMERA.POSITION.Z = (SIN_CAM * TEMPX + COS_CAM * TEMPZ) + PLAYER_POS.Z

	CAMERA.TARGET = VECTOR3(PLAYER_POS.X, PLAYER_POS.Y + CAMERA_HEIGHT, PLAYER_POS.Z)
	
	TEMPX = PLAYER_POS.X - CAMERA.POSITION.X
	TEMPZ = PLAYER_POS.Z - CAMERA.POSITION.Z
	
	IF ISKEYDOWN(KEY_UP) OR Y_AXIS < -.9 THEN
		IF DIRECTION = BACKWARDS THEN IF SPEED > 0 THEN SPEED -= 1 ELSE DIRECTION = FORWARDS
		
		IF DIRECTION = FORWARDS THEN
			IF SPEED = 0 THEN 
				SPEED = 5 
			ELSEIF SPEED < MAX_SPEED THEN 
				SPEED += 1
			END IF
		END IF
	ELSEIF ISKEYDOWN(KEY_DOWN) OR Y_AXIS > .9 THEN
		IF DIRECTION = FORWARDS THEN IF SPEED > 0 THEN SPEED -= 1 ELSE DIRECTION = BACKWARDS
		
		IF DIRECTION = BACKWARDS THEN
			IF SPEED = 0 THEN 
				SPEED = 5 
			ELSEIF SPEED < MAX_SPEED/2 THEN 
				SPEED += 1
			END IF
		END IF
	ELSE 
		IF SPEED > 0 AND NOT (ISJUMPING OR ISFALLING) THEN SPEED -= 1
	END IF
	
	COLLIDETEST = FALSE
	
	IF SPEED > 0 THEN
		IF DIRECTION = FORWARDS THEN
			FOR I = 0 TO SPEED
				
				FOR J = 0 TO UBOUND(CUBE_POSITIONS)
					IF BOXSPHERECOLLISION(VECTOR3(PLAYER_POS.X + TEMPX/200,PLAYER_POS.Y,PLAYER_POS.Z + TEMPZ/200), PLAYER_RADIUS, CUBE_POSITIONS(J), CUBE_DIMENSIONS(J)) = TRUE THEN COLLIDETEST = TRUE
				NEXT J

				IF NOT COLLIDETEST THEN 
					PLAYER_POS.X += TEMPX/200
					PLAYER_POS.Z += TEMPZ/200
					CAMERA.POSITION.X += TEMPX/200
					CAMERA.POSITION.Z += TEMPZ/200
				ELSE
					I = SPEED
				END IF
			NEXT I
		ELSE
			FOR I = 0 TO SPEED
				
				FOR J = 0 TO UBOUND(CUBE_POSITIONS)
					IF BOXSPHERECOLLISION(VECTOR3(PLAYER_POS.X - TEMPX/200,PLAYER_POS.Y,PLAYER_POS.Z - TEMPZ/200), PLAYER_RADIUS, CUBE_POSITIONS(J), CUBE_DIMENSIONS(J)) = TRUE THEN COLLIDETEST = TRUE
				NEXT J

				IF NOT COLLIDETEST THEN 
					PLAYER_POS.X -= TEMPX/200
					PLAYER_POS.Z -= TEMPZ/200
					CAMERA.POSITION.X -= TEMPX/200
					CAMERA.POSITION.Z -= TEMPZ/200
				ELSE
					I = SPEED
				END IF
			NEXT I
		END IF 	
	END IF
	
	IF SPEED = 0 THEN
	
			FOR J = 0 TO UBOUND(CUBE_POSITIONS)
				IF BOXSPHERECOLLISION(VECTOR3(PLAYER_POS.X + TEMPX/200,PLAYER_POS.Y,PLAYER_POS.Z + TEMPZ/200), PLAYER_RADIUS, CUBE_POSITIONS(J), CUBE_DIMENSIONS(J)) = TRUE THEN COLLIDETEST = TRUE
			NEXT J
	END IF 
	
	IF COLLIDETEST THEN 
			CORRECTION_OFFSET = 1
			SOLVEDCOLLISION = FALSE
		
			COLLISION_CORRECTION:
			
			IF (DIRECTION = FORWARDS OR SPEED = 0) AND NOT BOXSPHERECOLLISION(VECTOR3(PLAYER_POS.X - TEMPX/200 - CORRECTION_OFFSET,PLAYER_POS.Y,PLAYER_POS.Z - TEMPZ/200 - CORRECTION_OFFSET), PLAYER_RADIUS, CUBE_POSITIONS(J), CUBE_DIMENSIONS(J)) THEN
				SOLVEDCOLLISION = TRUE
			ELSEIF DIRECTION = BACKWARDS AND NOT BOXSPHERECOLLISION(VECTOR3(PLAYER_POS.X + TEMPX/200 + CORRECTION_OFFSET,PLAYER_POS.Y,PLAYER_POS.Z + TEMPZ/200 + CORRECTION_OFFSET), PLAYER_RADIUS, CUBE_POSITIONS(J), CUBE_DIMENSIONS(J)) THEN
				SOLVEDCOLLISION = TRUE
			END IF 
			
			
			
			CORRECTION_OFFSET += 1
			
			IF NOT SOLVEDCOLLISION THEN GOTO COLLISION_CORRECTION
			
			'IF SQR((TEST_FORWARDX) * (TEST_FORWARDX) + (TEST_FORWARDZ) * (TEST_FORWARDZ)) < SQR((0-TEST_BACKWARDX) * (0-TEST_BACKWARDX) + (TEST_BACKWARDZ) * (TEST_BACKWARDZ)) THEN
			IF DIRECTION = FORWARDS OR SPEED = 0 THEN
				PLAYER_POS.X -= TEMPX/200 + CORRECTION_OFFSET
				PLAYER_POS.Z -= TEMPZ/200 + CORRECTION_OFFSET
				CAMERA.POSITION.X -= TEMPX/200 + CORRECTION_OFFSET
				CAMERA.POSITION.Z -= TEMPZ/200 + CORRECTION_OFFSET
				
				
			ELSE
				PLAYER_POS.X += TEMPX/200 + CORRECTION_OFFSET
				PLAYER_POS.Z += TEMPX/200 + CORRECTION_OFFSET
				CAMERA.POSITION.X += TEMPX/200 + CORRECTION_OFFSET
				CAMERA.POSITION.Z += TEMPZ/200 + CORRECTION_OFFSET
			ENDIF
			
			COLLISION_CORRECTED:
			SPEED = 0
		END IF
	
REST:
	IF GETTIME() - OLDTIME < 1 / 60 THEN SLEEP 1:GOTO REST

IF NOT WINDOWSHOULDCLOSE() THEN GOTO MAIN

END:
CLOSEWINDOW()

FUNCTION BOXCOLLISION(SPOT AS VECTOR3, BOX AS VECTOR3, DIMENSIONS AS VECTOR3) AS BOOLEAN
	VAR FLAG = FALSE
	IF (BOX.X - (DIMENSIONS.X/2) < SPOT.X) AND (SPOT.X < BOX.X + (DIMENSIONS.X/2)) THEN
		IF (BOX.Y - (DIMENSIONS.Y/2) < SPOT.Y) AND (SPOT.Y < BOX.Y + (DIMENSIONS.Y/2)) THEN
			IF (BOX.Z - (DIMENSIONS.Z/2) < SPOT.Z) AND (SPOT.Z < BOX.Z + (DIMENSIONS.Z/2)) THEN
				FLAG = TRUE
			END IF 
		END IF 
	END IF 
	RETURN FLAG
END FUNCTION

FUNCTION BOXSPHERECOLLISION(SPOT AS VECTOR3, RADIUS AS INTEGER, BOX AS VECTOR3, DIMENSIONS AS VECTOR3) AS BOOLEAN
	VAR FLAG = FALSE
	
	IF (BOX.Y - (DIMENSIONS.Y/2) < SPOT.Y) AND (SPOT.Y < BOX.Y + (DIMENSIONS.Y/2)) THEN
	
		VAR DISTX = ABS(SPOT.X - BOX.X)
		VAR DISTZ = ABS(SPOT.Z - BOX.Z)
		
		IF DISTX > DIMENSIONS.X / 2 + RADIUS THEN RETURN FALSE
		IF DISTZ > DIMENSIONS.Z / 2 + RADIUS THEN RETURN FALSE
		
		IF DISTX <= DIMENSIONS.X/2 THEN RETURN TRUE
		IF DISTZ <= DIMENSIONS.Z/2 THEN RETURN TRUE
		
		VAR DX = DISTX - DIMENSIONS.X/2
		VAR DZ = DISTZ - DIMENSIONS.Z/2
		
		RETURN DX * DX + DZ * DZ <= RADIUS * RADIUS
	END IF 
	RETURN FLAG
END FUNCTION
